//=============================================================================
// Расчет параметров движения поезда в режиме тяги
// Входные параметры:
//      vn - начальная скорость режима тяги
//      sn - начальная координата режима тяги
//      vk - конечная скорость режима тяги
//      sk - конечная координата режима тяги
// Глобальные переменные
//      tx - тяговые характеристики
//         - удельное основное сопротивление движению поезда
//         - профиль пути
//=============================================================================
function r=throtle(vn,sn,vk,sk)
    v=vn
    s=sn
    tvk=vk // текущая конечная скорость
    vlim=200 // ограничение скорсти на текущем элементе профиля пути (закладка на будущее, равно 200 км/ч чтобы всегда попадать в ограничение скорости движения поезда)
    v_cnst=-1 // скорость установившегося режима (тоже пока заглушка)
    ctx=findtx(v)
    
    // Преобразуем тяговую характеристику в удельную
    ftx(1)=ctx(4)/(mp+ml)
    ftx(2)=ctx(5)/(mp+ml)
    ftx(3)=ctx(6)/(mp+ml)
    // опеределяем элемент профиля пути на котором находимся в данный момент
    cprf=finds(s)
disp(cprf)
    // определяем коэффициенты удельной результирующей силы действующей на поезд
    ftx(1)=ftx(1)-wres(1,1)-cprf(1,3)
    ftx(2)=ftx(2)-wres(1,2)
    ftx(3)=ftx(3)-wres(1,3)
    sconst=SVCurve(ftx,v) //постоянная интегрирования по пути (смещаем координату в начало текщего элемента профиля пути)
    tconst=TVCurve(ftx,v) // постоянная интегрирования по времени (смещаем начальную точку в начало временного интервала)
    mprintf("Постоянные интегрирования:")
    mprintf(" \n\tпо пути scost:  \t%f; \n\tпо времени tconst: \t%f\n",sconst,tconst)
    // определяем возможную скорость установившегося режима
    fres_vn=f_res(ftx,v)         // результирующая удельная сила в начале интервала скоростей
    fres_vk= f_res(ftx,ctx(3))  // результирующая удельная сила в конце интервала скоростей
    mprintf("\nРезультирующая сила fres(%f)=%f",v,fres_vn)
    mprintf("\nРезультирующая сила fres(%f)=%f",ctx(3),fres_vk)
    // необходимо определить, изменялся или нет знак удельной результирующей силы, если изменялся, то на заданном интервале возможен режим с постоянной скоростью
    if (fres_vn>0 && fres_vk<0)||(fres_vn<0 && fres_vk>0) then
        mprintf("\nУстановившийся режим возможен")
        function y=f(x)
            y=ftx(1)+ftx(2)*x+ftx(3)*x^2
        endfunction
        v_cnst=fsolve([v,ctx(3)],f)
        mprintf("\nТеоретическая скорость установившегося режима v_cnst=%f",v_cnst)
    else
        mprintf("\nУстановившийся режим не возможен")
        v_cnst=-1 // установившийся режим не возможен, -1 - индикатор такого положения
    end
    
    // определяем временную конечную скорость
    if v_cnst<0 then tvk=min(vk,ctx(3),vlim)
    else
        tvk=min(vk,ctx(3),vlim,v_cnst)
    end
    mprintf("\nПромежуточная конечная скорость расчета на текущем элементе: tvk=%f км/ч",tvk)
    // определяем координату пути в которой окажемся при достижении выбранной скорости vk (конечной скорости)
    stmp=SVCurve(ftx,tvk)-sconst
    printf("\nКоордината S(vk)=%f",stmp+sn)
    if (stmp+sn)<(cprf(1,2)+cprf(1,4)) then
        // координата stmp находится на текущем элементе профиля пути
        if (stmp+sn)>sk then
            // ищем скорость при которой попадем в координату sk
        end
    else
        // координата stmp находится на следующем элементе профиля пути
        if (cprf(1,2)+cprf(1,4))<sk then
            //конечная координата разгона находится на последующих элементах профиля пути
            // ищем скорость при которой попадем в конечную координату текущего элемента профиля пути sk
        else
            //конечная координата разгона находится на текущем элементе профиля пути
            //ищем скорость при которой попадем в координату sk
        end
        
    end
    




//    if tvk>ctx(3) then
//        tvk=ctx(3) // конечная скорость текущей тяговой характеристики
//    end
//    if tvk>vlim then
//        tvk=vlim // ограничение скорости на текущем элементе профиля пути
//    end
//    if tvk>v_cnst && v_cns>-1 then
//        tvk=vconst // скорость установшегося режима (постоянная скорость)
//    end
    
    
    //if vk>ctx(3) then
    //    tvk=ctx(3)
    //else
    //    tvk=vk
    //end
    
endfunction
